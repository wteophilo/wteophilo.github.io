<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://wteophilo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wteophilo.github.io/" rel="alternate" type="text/html" /><updated>2022-05-06T19:37:58+00:00</updated><id>https://wteophilo.github.io/feed.xml</id><title type="html">Willian Teophilo</title><subtitle>Willian Teophilo</subtitle><author><name>Willian Teophilo</name></author><entry><title type="html">Template Histórias de Usuário</title><link href="https://wteophilo.github.io/2022/03/30/template-historias-usuario.html" rel="alternate" type="text/html" title="Template Histórias de Usuário" /><published>2022-03-30T19:42:00+00:00</published><updated>2022-03-30T19:42:00+00:00</updated><id>https://wteophilo.github.io/2022/03/30/template-historias-usuario</id><content type="html" xml:base="https://wteophilo.github.io/2022/03/30/template-historias-usuario.html"><![CDATA[<p>Começamos um nova feature do produto e o time estava animado para iniciar essa feature, após algumas semanas as entregas estavam sendo feitas, porem algo estava me chamando a atenção. A cada entrega dessa feature mais e mais bugs estavam sendo abertos durante a etapada de desenvolvimento.</p>

<p>Durante uma retrospectiva com time foi dito que a forma como as <a href="https://agilementoring.wordpress.com/tag/user-story/">histórias</a> estavam sendo escritas eram um pouco confusas ou faltavam informações. Assim identificamos a cauza raíz do problema e como plano de ação me dei uma tarefa para ajudar o time com uma maneira de melhorar a forma de escrita das histórias e durante a minha pesquisa encontrei o <a href="https://www.amazon.com.br/dp/B097C9RHF7/ref=sr_1_4?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;dchild=1&amp;keywords=pbb&amp;qid=1623867809&amp;sr=8-4">Product Backlog Building</a>.</p>

<h3 id="o-que-é-product-backlog-building">O que é Product Backlog Building?</h3>

<p>“O Product Backlog Building (PBB) consiste em vivenciar na prática a elaboração e criação de um Product Backlog efetivo e colaborativo, esclarecendo as user stories e o backlog dos times, e utilizando o PBB Canvas como ferramenta facilitação.”</p>

<p>Durante a leitura do livro um template de para criação de histórias de usuário me chamou a atençãoesse template possui algumas partes:</p>

<ul>
  <li>Título da história</li>
  <li>Criterio de aceite</li>
  <li>Habilitadores</li>
</ul>

<p>Seguir vou passar por cada um desses itens:</p>

<h3 id="título-da-história">Título da história</h3>

<p>Podemos utilizar o modelo ARO</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Ação][Resultado][Objeto]
</code></pre></div></div>

<p>Exemplos:</p>
<ul>
  <li>Calcular a quantidade total vendida por um vendedor</li>
  <li>Efetuar a inscrição no evento</li>
  <li>Realizar a pesquisa do livro</li>
</ul>

<p>Descrição:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Como &lt;papel&gt; posso &lt;funcão&gt; para &lt;valor de negocio&gt;
</code></pre></div></div>

<p>Exemplos:</p>
<ul>
  <li>Como suporte posso logar no backoffice para desbloquear um cartão virtual</li>
  <li>Como usuário posso visualizar o histórico da fatura no app para conferir todas as compras feitas anteriormente</li>
</ul>

<h3 id="critério-de-aceite">Critério de aceite:</h3>

<p>Critério de aceite é um formato textual que descreve como validar numa história de usuario. Geralmente é uma lista de verificação que determa quando uma história de usuário está concluida e funcionando.</p>

<p>Podemos utilizar a sintase <a href="https://cucumber.io/docs/gherkin/">Gherkin</a> para descrever os comportamentos desejados pelo produto, formato:</p>

<p>Genérico:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cenário&lt;Título&gt;
Dado que &lt;contexto inicial&gt;
Quando &lt;evento ou ação&gt;
Então &lt;resultado esperado&gt;
</code></pre></div></div>

<p>Exemplo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cenário: Saque disponivel
Dado que o cartão é valido e a conta tem saldo maior que R$500
Quando o cliente solicitar o saque de R$500
Então o caixa eletronico deve dispensar R$500,00
</code></pre></div></div>

<p>Granular:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cenário&lt;Título&gt;
Dado que &lt;contexto inicial&gt;
E &lt;contexto inicial&gt;
Quando &lt;evento ou ação&gt;
E &lt;evento ou ação&gt;
Então &lt;resultado esperado&gt;
</code></pre></div></div>

<p>Exemplo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cenario: Logar com sucesso
Dado que estou na página de login do Outlook 360
Quando preencho o campo email com um email válido
E clico em avançar
E preencho  campo enha com uma senha válido
Então sou direcionado para minha caixa de entrada do Outlook 360
</code></pre></div></div>

<p>Uma alteração que achei melhor alterar foi ao final de cada cenário incluir o wireframe ou link do figma</p>

<h3 id="habilitadores">Habilitadores<Opcional>:</Opcional></h3>

<p>Os habilitadores são estimos que o time pode precisar estudar/pesquisar antes de iniciar  o desenvolvimento  da história. São separados em:</p>

<ul>
  <li>Habilitador Exploratório:</li>
  <li>Habilitador Técnico</li>
</ul>

<p>Exemplo de  Habilitador exploratório</p>

<p>Estudar o endpoint API de integração com as plataforma s e compartilhamento de apresentações on-line(SlideShare e Speaker Deck)</p>

<p>Exemplo de Habilitador Técnico</p>

<p>Consumir o endpoint embed como uma tag de link no cabeçalho para que possa ser detectado automaticamente quando incorporar a apresentação</p>

<h3 id="observações">Observações:</h3>
<p>Lembrando que as histórias deve seguir o padrão INVEST e se possivel as tarefas o <a href="https://wteophilo.github.io/2018/04/04/requisitos-smart.html">padrão SMART</a></p>

<h3 id="referências">Referências:</h3>
<ul>
  <li><a href="https://agilementoring.wordpress.com/tag/user-story/">User Story</a></li>
  <li><a href="https://medium.com/@ronilsonribeiro/escrita-do-bdd-no-processo-de-desenvolvimento-469ea46540db">Behaviour Driven Development</a></li>
  <li><a href="https://www.amazon.com.br/dp/B097C9RHF7/ref=sr_1_4?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;dchild=1&amp;keywords=pbb&amp;qid=1623867809&amp;sr=8-4">Product Backlog Build</a></li>
  <li><a href="https://cucumber.io/docs/gherkin/">Gherkin</a></li>
</ul>]]></content><author><name>Willian Teophilo</name></author><category term="Agile" /><category term="Gestão de Projetos" /><summary type="html"><![CDATA[Começamos um nova feature do produto e o time estava animado para iniciar essa feature, após algumas semanas as entregas estavam sendo feitas, porem algo estava me chamando a atenção. A cada entrega dessa feature mais e mais bugs estavam sendo abertos durante a etapada de desenvolvimento.]]></summary></entry><entry><title type="html">Docker</title><link href="https://wteophilo.github.io/2020/07/02/docker.html" rel="alternate" type="text/html" title="Docker" /><published>2020-07-02T20:09:00+00:00</published><updated>2020-07-02T20:09:00+00:00</updated><id>https://wteophilo.github.io/2020/07/02/docker</id><content type="html" xml:base="https://wteophilo.github.io/2020/07/02/docker.html"><![CDATA[<p>Saber linguagens de programação e paradigmas é muito importante, mas no dia a dia muitas vezes temos que usar alguns serviços de infra que não damos muita importância em aprender. Então vamos começar falando pelo Docker. Para instalar o docker basta seguir este <a href="https://docs.docker.com/get-docker/">link</a>.</p>

<p>Neste post vamos falar sobre:</p>

<ul>
  <li>Docker x VMs</li>
  <li>Dockerfile</li>
  <li>Docker Compose</li>
  <li>Comandos básicos Docker</li>
</ul>

<h3 id="docker-x-vms">Docker x VMs</h3>

<h4 id="máquinas-virtuais-vms">Máquinas virtuais (VMs)</h4>

<p>Máquinas virtuais (VMs) são uma abstração de hardware físico que transforma um servidor em muitos servidores. O hypervisor permite que várias VMs sejam executadas em uma única máquina. Cada VM inclui uma cópia completa de um sistema operacional, aplicativo, binários e bibliotecas necessários  ocupando dezenas de GBs.</p>

<p><img src="/assets/img/docker/container-vm.png" alt="container-vm" /></p>

<h5 id="docker">Docker</h5>

<p>Os contêineres são uma abstração na camada de aplicativo que agrupa código e dependências juntos. Vários contêineres podem ser executados na mesma máquina e compartilhar o kernel do sistema operacional com outros contêineres, cada um executando como processos isolados Os contêineres ocupam menos espaço que as VMs podem lidar com mais aplicativos e requerem menos VMs e sistemas operacionais.</p>

<p><img src="/assets/img/docker/docker-containerized.png" alt="dockercontainerized" /></p>

<h3 id="dockerfile">Dockerfile</h3>

<p>Um Dockerfile é um documento de texto que contém as instruções  para montar uma imagem.</p>

<p>Exemplo Dockerfile:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM ruby:2.7.1-alpine3.10

WORKDIR /app
EXPOSE 80

COPY . /app

RUN apk update &amp;&amp; \
    apk add libxslt-dev build-base libxml2-dev curl jq tzdata sqlite-dev yarn &amp;&amp; \
    bundle install &amp;&amp; \
    yarn install 
</code></pre></div></div>

<p>O que faz cada instrução do exemplo acima:</p>

<ul>
  <li>FROM: imagem a ser utilizada, no exemplo estávamos usando uma imagem de Ubuntu alpine + Ruby 2.7</li>
  <li>WORKDIR: pasta de trabalho normalmente ao acessar o container</li>
  <li>EXPOSE: expõe a porta do container</li>
  <li>COPY: copia o conteúdo da sua máquina e adiciona em uma pasta no container</li>
  <li>RUN: executa comandos durante o build da imagem por exemplo instala algumas bibliotecas necessárias para o funcionamento do container</li>
</ul>

<h3 id="docker-compose">Docker Compose</h3>

<p>O Docker Compose é uma ferramenta para orquestar contêineres, com ela podemos subir vários containers ao mesmo tempo por exemplo nosso mais um banco de dados. Para utiliza-lo é preciso um arquivo <a href="http://yaml.org/">YAML</a> para configurar os serviços do seu aplicativo.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: "3.6"
services:
  web:
    image: api
    build:
      context: .
      volumes:
      - "/app/.bundle"
      - "/app/vendor"
      - ".:/app"
      - "bundle:/usr/local/bundle"
    container_name: api_app
    ports:
      - 80:3000
    depends_on:
      - mysql
      - redis
    env_file: .env.docker
    environment:
      RAILS_ENV: development
    links:
      - mysql
      - redis

  mysql:
    image: mysql:5.7
    ports:
      - '3306:3306'
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_USER=root
    container_name: api_mysql

  redis:
     image: redis:alpine
     container_name: api_redis
     ports:
       - 6379:6379
volumes:
  bundle:
</code></pre></div></div>

<h3 id="comandos-básicos-docker">Comandos básicos Docker</h3>

<p>Criando uma imagem basta utilizar o comando <code class="language-plaintext highlighter-rouge">build</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build .
</code></pre></div></div>

<p>Podemos adicionar tag na nossa nova imagem usando <code class="language-plaintext highlighter-rouge">-t</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build -t "minha-image" .
</code></pre></div></div>

<h5 id="acessando-container">Acessando container</h5>

<p>Para executar um comando dentro do container por exemplo executar um bundle install, caso não tenha especificado no Dockerfile usamos <code class="language-plaintext highlighter-rouge">run</code> e o comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it minha-imagem comando
</code></pre></div></div>

<p>Se o container estiver em pé e não queria subir outro container basta usar o comando <code class="language-plaintext highlighter-rouge">exec</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker exec -it minha-imagem comando
</code></pre></div></div>

<h4 id="listando-imagens">Listando imagens</h4>

<p>O comando para listar todas as imagens baixadas em seu computador:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker images
</code></pre></div></div>

<p>Podemos mesclar os comandos do Docker com do terminal, digamos que queremos localizar uma imagem em específico.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker imagens | grep minha-imagem
</code></pre></div></div>

<p>Para verificar quais containers estão rodando no momento em sua máquina use o comando baixo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps
</code></pre></div></div>

<p>Na coluna status terão dois valores:</p>

<ul>
  <li>Up - funcionando</li>
  <li>Exit - não funcionado</li>
</ul>

<h4 id="apagando-imagens">Apagando imagens</h4>

<p>Para apagar uma image basta utilizar o comando <code class="language-plaintext highlighter-rouge">rmi</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi hash-imagem
</code></pre></div></div>

<p>Apagando várias imagens</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi $(docker images | grep minha-imagem)
</code></pre></div></div>

<h4 id="logs">Logs</h4>

<p>Podemos verificar também os logs de um de nossos containers usando o comando <code class="language-plaintext highlighter-rouge">logs</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker logs minha-imagem
</code></pre></div></div>

<h4 id="volumes">Volumes</h4>

<p>O <a href="https://docs.docker.com/storage/volumes/">volume</a> é o mecanismo preferido para persistir os dados gerados e usados ​​pelos contêineres do Docker, embora as montagens de ligação dependam da estrutura de diretórios da máquina host, os volumes são completamente gerenciados pelo Docker.</p>

<p>Podemos criar um volume usando o comando <code class="language-plaintext highlighter-rouge">create</code> como mostra o exemplo a seguir:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume create &lt;nome/hash&gt;
</code></pre></div></div>

<p>Para listar todos os volumes basta usar <code class="language-plaintext highlighter-rouge">ls</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume ls
</code></pre></div></div>

<p>Apagando um volume:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume rm &lt;nome/hash&gt;
</code></pre></div></div>

<p>Caso queria apagar todos os volumes de uma vez utilize o comando <code class="language-plaintext highlighter-rouge">prune</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume prune
</code></pre></div></div>

<h4 id="networks">Networks</h4>

<p>Um dos motivos pelos quais os contêineres e serviços do Docker são tão poderosos é que você pode conectá-los ou conectá-los a cargas de trabalho que não são do Docker, para mais informações sobre networks no docker segue o <a href="https://docs.docker.com/network/">link</a>.</p>

<p>Os comandos para manipular um network são os mesmos mostrados nos volumes:</p>

<p>Criando volume:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network create &lt;nome/hash&gt;
</code></pre></div></div>

<p>Listando volume:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network ls
</code></pre></div></div>

<p>Delete volume:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network rm &lt;nome/hash&gt;
</code></pre></div></div>

<p>Por fim algumas dicas para finalizar esse post. Todos estes comandos podem ser usados com o docker-compose caso esteja usando o compose em seu projeto. 
Como existem vários comandos do docker e se tiver alguma dúvida em relação de algum deles basta adicionar –help:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build --help
</code></pre></div></div>

<p>ou consultar a documentação oficial do <a href="https://docs.docker.com/">docker</a>. 
E como uma última dica caso tenha um PC com HD/SSD pequeno sempre fique de olho no volume.</p>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="Docker" /><summary type="html"><![CDATA[Saber linguagens de programação e paradigmas é muito importante, mas no dia a dia muitas vezes temos que usar alguns serviços de infra que não damos muita importância...]]></summary></entry><entry><title type="html">Introdução FactoryBot</title><link href="https://wteophilo.github.io/2019/02/10/intro-factorybot.html" rel="alternate" type="text/html" title="Introdução FactoryBot" /><published>2019-02-10T22:38:00+00:00</published><updated>2019-02-10T22:38:00+00:00</updated><id>https://wteophilo.github.io/2019/02/10/intro-factorybot</id><content type="html" xml:base="https://wteophilo.github.io/2019/02/10/intro-factorybot.html"><![CDATA[<p>Quando estamos testando nossa aplicação muitas vezes queremos que os dados seja já pré definidos mas não queremos fixa-los no código então vamos falar sobre a gem FactoryBot. Nos primórdios do Rails era utilizados arquivos YAML/CSV  onde cada arquivo conter dados de um único modelo esses arquivos são conhecidos como <a href="https://api.rubyonrails.org/v3.1/classes/ActiveRecord/Fixtures.html">fixtures</a>, segue exemplo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rubyonrails:
  id: 1
  name: Ruby on Rails
  url: http://www.rubyonrails.org

google:
  id: 2
  name: Google
  url: http://www.google.com
</code></pre></div></div>

<p>E aplicação em nossos testes utilizando a gem padrão do rails:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">test</span> <span class="s2">"find"</span> <span class="k">do</span>
  <span class="n">assert_equal</span> <span class="s2">"Ruby on Rails"</span><span class="p">,</span> <span class="n">web_sites</span><span class="p">(</span><span class="ss">:rubyonrails</span><span class="p">).</span><span class="nf">name</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Com o tempo  a gem FactoryGirl foi criada usando boa parte funcionalidades que fixtures utilizam e outras mais. Em 24-08-2017 o nome do projeto foi trocado para <a href="https://github.com/thoughtbot/factory_bot">factorybot</a>.</p>

<p>O FactoryBot possui duas gems uma que pode ser utilizadas para projetos em Ruby puro e outra para projetos em Rails, ambos podem ser adicionadas no GemFile no group de testes.</p>

<p>Ruby Puro:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
    <span class="n">gem</span> <span class="s1">'factory_bot'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Rails (<a href="https://github.com/thoughtbot/factory_bot_rails">factory_bot_rails</a>)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>group :development, :test do
	gem 'factory_bot_rails' 
end
</code></pre></div></div>

<p>No decorrer deste post vamos utilizar utilizar a gem factory_bot _rails. Para utiliza-la devemos adicionar o seguinte trecho de código a seguir na pasta <strong>spec/rails_helper.rb</strong>, assim o Rails vai se integrar ao FactoryBot.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
    <span class="n">config</span><span class="p">.</span><span class="nf">include</span> <span class="no">FactoryBot</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>
<span class="k">end</span>
</code></pre></div></div>

<p>A pasta spec é criada ao usar a gem Rspec temos um post sobre o assunto caso tenha interesse basta <a href="https://wteophilo.github.io/2018/04/11/ola-rspec.html">clicar aqui</a>. Agora que sabemos o que é o FactoryBot e suas configurações vamos utiliza-lo. Temos uma classe bem básica de usuário com alguns atributos e um método que imprimi o nome completo</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
    <span class="n">validates</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
    <span class="k">def</span> <span class="nf">full_name</span>
        <span class="s2">"</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>E queremos realizar alguns testes nesta classe e é ai que entra nossa factory,  por convenção devemos nossa factory com o mesmo nome da nossa classe ou seja <strong>user.rb</strong> na pasta <strong>spec/factories</strong>  seguinte conteúdo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">FactoryBot</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
    <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
        <span class="n">first_name</span>  <span class="p">{</span><span class="s2">"Willian"</span><span class="p">}</span> 
        <span class="n">last_name</span>  <span class="p">{</span><span class="s2">"Teophilo"</span> <span class="p">}</span>
        <span class="n">email</span>  <span class="p">{</span><span class="s2">"wteophilo@gmail.com"</span><span class="p">}</span> 
        <span class="n">age</span> <span class="p">{</span> <span class="mi">28</span> <span class="p">}</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Como vimos no inicio do post nossa facory basicamente vai popular todos os atribuitos da nossa classe User, deixando os nossos testes mais simples pois já sabemos a entrada de dados. No FactoryBot existe duas maneiras de criar um objeto a partir de uma factory são eles:</p>

<ul>
  <li><strong>create</strong> : Cria e persiste o objeto no banco de dados</li>
  <li><strong>build</strong>: Apenas cria o objeto em memória</li>
</ul>

<p>Por fim o nosso teste da classe User utilizando o FactoryBot, segue o código abaixo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">User</span><span class="p">,</span> <span class="ss">type: :model</span> <span class="k">do</span>    
    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@user</span> <span class="o">=</span> <span class="n">build</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="n">it</span> <span class="s1">'should show user with full name'</span> <span class="k">do</span>
        <span class="n">expect</span><span class="p">(</span><span class="vi">@user</span><span class="p">.</span><span class="nf">full_name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"Willian Teophilo"</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="n">it</span> <span class="s1">'should have the same attributes of factory'</span> <span class="k">do</span>
		<span class="n">expect</span><span class="p">(</span><span class="vi">@user</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_attributes</span>
			<span class="p">(</span><span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="s2">"Willian"</span><span class="p">,</span> 
			<span class="ss">:last_name</span> <span class="o">=&gt;</span> <span class="s2">"Teophilo"</span><span class="p">,</span>
			<span class="ss">:email</span> <span class="o">=&gt;</span><span class="s2">"wteophilo@gmail.com"</span><span class="p">,</span> 
			<span class="ss">:age</span> <span class="o">=&gt;</span> <span class="mi">28</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Este é um post bem introdutório sobre o FactoryBot e pretendo criar outros sobre ele, não se esqueça de comentar o que achou ou suas dúvidas.</p>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="Ruby" /><summary type="html"><![CDATA[Quando estamos testando nossa aplicação muitas vezes queremos que os dados seja já pré definidos mas não queremos fixa-los no código então vamos falar sobre a gem FactoryBot...]]></summary></entry><entry><title type="html">Escopos de Variáveis em Ruby</title><link href="https://wteophilo.github.io/2018/10/07/escopos-variaveis-ruby.html" rel="alternate" type="text/html" title="Escopos de Variáveis em Ruby" /><published>2018-10-07T19:11:00+00:00</published><updated>2018-10-07T19:11:00+00:00</updated><id>https://wteophilo.github.io/2018/10/07/escopos-variaveis-ruby</id><content type="html" xml:base="https://wteophilo.github.io/2018/10/07/escopos-variaveis-ruby.html"><![CDATA[<p>Anteriormente falamos sobre os <a href="https://wteophilo.github.io/2018/07/12/tipos-de-variaveis.html">tipos de variáveis</a>  que podemos utilizar no Ruby, agora vamos abordar os escopos das variáveis.</p>

<p>O Ruby não possui nenhuma palavra chave para definir um escopo, usamos simbolos para identifica-los. Os escopos são:</p>

<ul>
  <li>Local</li>
  <li>Global($)</li>
  <li>Instância(@)</li>
  <li>Classe(@@)</li>
</ul>

<p>Com o decorrer deste post vamos mostrar exemplos da utilização dessas variáveis.</p>

<h2 id="variáveis-locais">Variáveis Locais</h2>

<p>As variáveis locais só podem ser acessadas dentro do método/bloco onde foram declaradas, veja o código abaixo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">conta_ate_dez</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="mi">10</span>
        <span class="nb">p</span> <span class="n">i</span>
    <span class="k">end</span>
<span class="k">end</span> 

<span class="nb">p</span> <span class="n">i</span>
<span class="o">=&gt;</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="o">...</span> <span class="mi">10</span>
</code></pre></div></div>

<p>Ao tentar acessar a variável <strong>“i”</strong> fora do método o erro abaixo será exibido:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">=</span><span class="err">&gt;</span><span class="w"> </span><span class="n">undefined</span><span class="w"> </span><span class="nx">local</span><span class="w"> </span><span class="nx">variable</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">method</span><span class="w"> </span><span class="se">`i</span><span class="s1">' for main:Object (NameError)
</span></code></pre></div></div>

<h2 id="variáveis-globais">Variáveis Globais($)</h2>

<p>As variáveis globais  podem ser acessadas em qualquer parte de do código, por conveção o simbolo <strong>$</strong> (cifrão) deve ser utilizado. Segue o exemplo abaixo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vg">$global</span> <span class="o">=</span> <span class="s2">"2.5.3"</span>
<span class="nb">puts</span> <span class="s2">"The scope is </span><span class="si">#{</span><span class="k">defined?</span> <span class="vg">$global</span><span class="si">}</span><span class="s2">"</span> 
<span class="o">=&gt;</span> <span class="no">The</span> <span class="n">scope</span> <span class="n">is</span> <span class="n">global</span><span class="o">-</span><span class="n">variable</span>
</code></pre></div></div>

<h2 id="variáveis-de-instância">Variáveis de Instância(@)</h2>

<p>Uma variável de instância é uma variável cujo valor é específico ao objeto e não à classe. Em geral possui uma valor diferente em cada objeto membro da classe, utilizamos o <strong>@</strong> para identificar esse tipo de variável. Abaixo um exemplo desse tipo de variável:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ComicBook</span>
    <span class="k">def</span> <span class="nf">initialize</span>
        <span class="vi">@name</span> <span class="o">=</span> <span class="s2">"Boku no Hero"</span>
        <span class="vi">@year</span> <span class="o">=</span> <span class="mi">2014</span>
        <span class="vi">@author</span> <span class="o">=</span> <span class="s1">'Kōhei Horikoshi'</span>
    <span class="k">end</span> 
<span class="k">end</span> 
</code></pre></div></div>

<p>Um método bem legal para listar todas as variáveis de instância de um objeto é <strong>instance_variables</strong>, vamos executar esse método na classe que criamos acima:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">manga</span> <span class="o">=</span> <span class="no">ComicBook</span><span class="p">.</span><span class="nf">new</span>
<span class="nb">p</span> <span class="n">manga</span><span class="p">.</span><span class="nf">instance_variables</span>
<span class="o">=&gt;</span><span class="p">[</span><span class="ss">:@name</span><span class="p">,</span> <span class="ss">:@year</span><span class="p">,</span> <span class="ss">:@autor</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="variáveis-de-classe">Variáveis de Classe(@@)</h2>

<p>Uma variável de classe é uma variável  que armazena seu próprio estado, quando o estado é alterado em algum objeto automaticamente o estado é alterado para todos os objetos, utilizamos <strong>@@</strong> para indentificar esse tipo de variável. Abaixo um exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Vehicle</span>
    <span class="vc">@@number_of_doors</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">number_of_doors</span>
        <span class="vc">@@number_of_doors</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Car</span> <span class="o">&lt;</span> <span class="no">Vehicle</span>
    <span class="vc">@@number_of_doors</span> <span class="o">=</span> <span class="mi">4</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s2">"Number of doors </span><span class="si">#{</span><span class="no">Vehicle</span><span class="p">.</span><span class="nf">number_of_doors</span><span class="si">}</span><span class="s2"> - Vehicle"</span>
<span class="o">=&gt;</span> <span class="no">Number</span> <span class="n">of</span> <span class="n">doors</span> <span class="mi">4</span> <span class="o">-</span> <span class="no">Vehicle</span>

<span class="nb">puts</span> <span class="s2">"Number of doors </span><span class="si">#{</span><span class="no">Car</span><span class="p">.</span><span class="nf">number_of_doors</span><span class="si">}</span><span class="s2"> - Car"</span> 
<span class="o">=&gt;</span><span class="no">Number</span> <span class="n">of</span> <span class="n">doors</span> <span class="mi">4</span> <span class="o">-</span> <span class="no">Car</span>

</code></pre></div></div>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="Ruby" /><summary type="html"><![CDATA[Anteriormente falamos sobre os tipos de variáveis que podemos utilizar no Ruby, agora vamos abordar os escopos das variáveis...]]></summary></entry><entry><title type="html">Condicionais em Ruby</title><link href="https://wteophilo.github.io/2018/09/10/condicionais-em-ruby.html" rel="alternate" type="text/html" title="Condicionais em Ruby" /><published>2018-09-10T21:51:00+00:00</published><updated>2018-09-10T21:51:00+00:00</updated><id>https://wteophilo.github.io/2018/09/10/condicionais-em-ruby</id><content type="html" xml:base="https://wteophilo.github.io/2018/09/10/condicionais-em-ruby.html"><![CDATA[<p>Vamos falar hoje sobre estrutura de controle em ruby especificamente as condicionais. As condicionais são controles que executam um trecho de código depedendo de uma condição, as condicionais em Ruby são:</p>

<ul>
  <li>If / elsif / else</li>
  <li>unless</li>
  <li>case</li>
</ul>

<p>Mas não podemos falar de condicionais se não falarmos de operadores relacionais e os operadores lógicos.</p>

<h2 id="operadores-relacionais">Operadores relacionais</h2>

<ul>
  <li>Igualdade <strong>==</strong></li>
  <li>Diferente <strong>!=</strong></li>
  <li>Maior que <strong>&gt;</strong></li>
  <li>Maior ou igual <strong>&gt;=</strong></li>
  <li>Menor <strong>&lt;</strong></li>
  <li>Menor ou igual <strong>&lt;=</strong></li>
</ul>

<h2 id="operadores-lógicos">Operadores Lógicos</h2>
<ul>
  <li>&amp;&amp; (and)</li>
  <li>|| (or)</li>
</ul>

<p>Vamos explorar um pouco mais sobre as condicionais com um pouco dos operadores relacionais.</p>

<h2 id="if">IF</h2>
<p>O if verifica se uma condição é verdadeira e apartir dessa verificação executa um trecho de código, segue o código abaixo utilizando também a igualdade:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">value</span> <span class="o">=</span> <span class="mi">30</span>
<span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="mi">30</span>
	<span class="nb">puts</span> <span class="s2">"Isso é verdade!"</span>
<span class="k">end</span></code></pre></figure>

<h2 id="else">ELSE</h2>
<p>O else seria um complemento do If, caso a verificação do if seja falsa o trecho de  código executado é o else, segue o exemplo abaixo:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">value</span> <span class="o">=</span> <span class="mi">30</span>
<span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="mi">10</span>
	<span class="nb">puts</span> <span class="s2">"valor menor que 10"</span>
<span class="k">else</span>
	<span class="nb">puts</span> <span class="s2">"valor igual a 30"</span>	
<span class="k">end</span></code></pre></figure>

<h2 id="elsif">ELSIF</h2>
<p>O elsif é utilizado quando precisamos de mais condicionais em nosso if, segue abaixo um exemplo:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">value</span> <span class="o">=</span> <span class="mi">30</span>
<span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="mi">10</span>
 	<span class="nb">puts</span> <span class="s2">"valor menor que 10"</span>
<span class="k">elsif</span> <span class="n">value</span> <span class="o">&lt;</span><span class="mi">20</span>
	<span class="nb">puts</span> <span class="s2">"valor igual a 20"</span>
<span class="k">elsif</span> <span class="n">value</span> <span class="o">&gt;=</span> <span class="mi">50</span>
	<span class="nb">puts</span> <span class="s2">"valor maior de 50"</span>
<span class="k">else</span>
	<span class="nb">puts</span> <span class="s2">"valor igual a 30"</span>
<span class="k">end</span></code></pre></figure>

<h2 id="unless">UNLESS</h2>
<p>O Unless é o oposto do if ou seja ele é executado  quando a resposta da condição for falsa(false).</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">value</span> <span class="o">=</span> <span class="mi">30</span>
<span class="k">unless</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">10</span>
	<span class="nb">puts</span> <span class="s2">"valor = 30"</span>
<span class="k">end</span></code></pre></figure>

<h2 id="case">CASE</h2>

<p>O Case é muito parecido com o If, mas podemos utilizar quando existem vários Ifs encadiados onde cada condição é testada com a cláusula <strong>when</strong>,segue o código abaixo:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mes_do_aniversario</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">case</span> <span class="n">mes_do_aniversario</span>
<span class="k">when</span> <span class="mi">1</span><span class="o">..</span><span class="mi">6</span>
	<span class="nb">puts</span> <span class="s2">"Você nasceu do primeiro semestre"</span>
<span class="k">when</span> <span class="mi">7</span><span class="o">..</span><span class="mi">12</span>
	<span class="nb">puts</span> <span class="s2">"Você nasceu do primeiro semestre"</span>
<span class="k">else</span>
 <span class="nb">puts</span> <span class="s2">"Não existe esse mês"</span>
<span class="k">end</span></code></pre></figure>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="Ruby" /><summary type="html"><![CDATA[Vamos falar hoje sobre estrutura de controle em ruby especificamente as condicionais. As condicionais são controles que executam um trecho de código depedendo de uma condição, as condicionais em Ruby...]]></summary></entry><entry><title type="html">Tipos de Variáveis em Ruby</title><link href="https://wteophilo.github.io/2018/07/12/tipos-de-variaveis.html" rel="alternate" type="text/html" title="Tipos de Variáveis em Ruby" /><published>2018-07-12T17:54:00+00:00</published><updated>2018-07-12T17:54:00+00:00</updated><id>https://wteophilo.github.io/2018/07/12/tipos-de-variaveis</id><content type="html" xml:base="https://wteophilo.github.io/2018/07/12/tipos-de-variaveis.html"><![CDATA[<p>Apesar de ser uma linguagem dinâmica o Ruby é uma linguagem fortemente tipada, diferente de outras linguagems como Java ou C++, quando declaramos uma variável precisamos definir também seu tipo, por exemplo:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nc">String</span> <span class="n">nome</span> <span class="o">=</span> <span class="s">"Willian"</span></code></pre></figure>

<p>Neste post vamos ver:</p>
<ul>
  <li>Declarando uma variável</li>
  <li>Tipos de variáveis</li>
  <li>Problemas de conversão</li>
</ul>

<h2 id="declarando-uma-variável">Declarando uma variável</h2>

<p>Para declarar uma variável é bem simples basta dar um nome e atribuir seu valor assim o tipo da variável é definido implicitamente. Veja o exemplo abaixo:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="n">nome</span> <span class="o">=</span> <span class="s2">"Willian"</span> <span class="o">=&gt;</span> <span class="s2">"Willian"</span>
<span class="o">&gt;</span> <span class="n">idade</span> <span class="o">=</span> <span class="mi">28</span> <span class="o">=&gt;</span> <span class="mi">28</span></code></pre></figure>

<h2 id="tipos-de-variáveis">Tipos de variáveis</h2>

<p>Como falamos anteriormente o Ruby possui alguns tipos, são eles:</p>

<ul>
  <li><strong>Fixnum</strong>: números inteiros</li>
  <li><strong>Float</strong>: números decimais</li>
  <li><strong>Bignum</strong>: números inteiros muito grandes</li>
  <li><strong>String</strong>: valores alfanumérico</li>
  <li><strong>FalseClass/TrueClass</strong>: valores booleanos</li>
</ul>

<p>Você deve estar se perguntando “Então podemos alterar o valor de uma variável sem precisar fazer conversões… mas isso não dá problema não?” Como podemos ver no exemplo abaixo apenas trocando os valores não tem problema</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="n">nome</span> <span class="o">=</span> <span class="s2">"Willian"</span> <span class="o">=&gt;</span> <span class="s2">"Willian"</span>
<span class="o">&gt;</span> <span class="n">nome</span> <span class="o">=</span> <span class="mi">5000</span> <span class="o">=&gt;</span> <span class="mi">5000</span></code></pre></figure>

<h2 id="problemas-de-conversão">Problemas de conversão</h2>

<p>Mas em nosso código do dia a dia provavelmente vamos usar uma variável em outros lugares é ai que mora o perigo…
Vamos analisar a seguinte situação digamos que temos uma a variável com o nome “idade” do tipo inteiro(Fixnum), por algum motivo durante o desenvolvimento achamos melhor trocar o seu valor para String mas esquecemos que somamos algum outro valor inteiro ao longo do código, o que acontece? Segue código abaixo:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="n">idade</span> <span class="o">=</span> <span class="mi">30</span> <span class="o">=&gt;</span> <span class="mi">30</span> 
<span class="o">&gt;</span> <span class="n">idade</span> <span class="o">=</span> <span class="s1">'WIL'</span> <span class="o">=&gt;</span> <span class="s2">"WIL"</span> 
<span class="o">&gt;</span> <span class="n">idade</span> <span class="o">+</span> <span class="mi">10</span>
<span class="no">TypeError</span><span class="p">:</span> <span class="n">no</span> <span class="n">implicit</span> <span class="n">conversion</span> <span class="n">of</span> <span class="no">Fixnum</span> <span class="n">into</span> <span class="no">String</span>
	<span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">16</span><span class="ss">:in</span> <span class="sb">`+'
	from (irb):16
	from /home/wt/.rvm/rubies/ruby-2.3.1/bin/irb:11:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">'</span></code></pre></figure>

<p>Se fizermos a operação inversa e tentar somar uma String em um inteiro(Fixnum) também temos o mesmo problema de conversão:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="n">idade</span> <span class="o">=</span> <span class="mi">30</span> <span class="o">=&gt;</span> <span class="mi">30</span> 
<span class="o">&gt;</span> <span class="n">idade</span> <span class="o">+</span> <span class="s2">"WIL"</span>
<span class="no">TypeError</span><span class="p">:</span> <span class="no">String</span> <span class="n">can</span><span class="s1">'t be coerced into Fixnum
	from (irb):36:in `+'</span>
	<span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">36</span>
	<span class="n">from</span> <span class="sr">/home/</span><span class="n">wt</span><span class="o">/</span><span class="p">.</span><span class="nf">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">irb</span><span class="p">:</span><span class="mi">11</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;'</span></code></pre></figure>

<p>Em Ruby tudo é classe inclusive os tipos são classes então se alterarmos o tipo da variável e nessa variável usamos um método exclusivo da classe também vamos ter problemas, veja o exemplo abaixo:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">caixa_alta</span><span class="p">(</span><span class="n">nome</span><span class="p">)</span>
<span class="o">&gt;</span>  <span class="n">nome</span><span class="p">.</span><span class="nf">upcase</span>
<span class="o">&gt;</span> <span class="k">end</span>
<span class="o">&gt;</span> <span class="n">nome</span> <span class="o">=</span> <span class="mi">30</span>
<span class="o">&gt;</span> <span class="n">caixa_alta</span> <span class="n">nome</span> <span class="o">=&gt;</span>
<span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`upcase' for 30:Fixnum
        from (irb):41:in `</span><span class="n">caixa_alta</span><span class="s1">'
        from (irb):43
        from /home/wt/.rvm/rubies/ruby-2.3.1/bin/irb:11:in `&lt;main&gt;'</span></code></pre></figure>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="Ruby" /><summary type="html"><![CDATA[Apesar de ser uma linguagem dinâmica o Ruby é uma linguagem fortemente tipada quando declaramos uma variável precisamos definir também seu tipo...]]></summary></entry><entry><title type="html">Relatórios Rspec</title><link href="https://wteophilo.github.io/2018/05/01/relatorios-rspec.html" rel="alternate" type="text/html" title="Relatórios Rspec" /><published>2018-05-01T20:03:00+00:00</published><updated>2018-05-01T20:03:00+00:00</updated><id>https://wteophilo.github.io/2018/05/01/relatorios-rspec</id><content type="html" xml:base="https://wteophilo.github.io/2018/05/01/relatorios-rspec.html"><![CDATA[<p>Sabemos que o Rspec é uma ferramenta poderosa para a realização de nossos testes, mas podemos realizar algumas configurações para entedermos melhor seus logs.</p>

<p>Digamos que estamos testando uma classe Calculator que basicamente faz a soma de dois números…</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Calculator</span>
  <span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
	<span class="n">a</span><span class="o">+</span><span class="n">b</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>e nosso teste:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">"calculator"</span>

<span class="n">describe</span> <span class="no">Calculator</span> <span class="k">do</span>
	<span class="n">subject</span><span class="p">(</span><span class="ss">:calc</span><span class="p">){</span><span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">()}</span>
	<span class="n">context</span> <span class="s2">"#sum"</span> <span class="k">do</span>
		<span class="n">it</span> <span class="s2">"with positive numbers"</span> <span class="k">do</span> 
			<span class="n">result</span> <span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span>
			<span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
		<span class="k">end</span>

		<span class="n">it</span> <span class="s2">"with negative and positive numbers"</span> <span class="k">do</span>
			<span class="n">result</span> <span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span>
			<span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
		<span class="k">end</span>

		<span class="n">it</span> <span class="s2">"with negative numbers"</span> <span class="k">do</span>
			<span class="n">result</span> <span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">7</span><span class="p">)</span>
			<span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">-</span><span class="mi">12</span><span class="p">)</span>
		<span class="k">end</span>
	<span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Ao executarmos esse teste temos a seguinte saida:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">bundle</span><span class="w"> </span><span class="nx">exec</span><span class="w"> </span><span class="nx">rspec</span><span class="w"> </span><span class="nx">spec</span><span class="w">
	
</span><span class="n">Finished</span><span class="w"> </span><span class="nx">in</span><span class="w"> </span><span class="nx">0.02381</span><span class="w"> </span><span class="nx">seconds</span><span class="w"> </span><span class="p">(</span><span class="n">files</span><span class="w"> </span><span class="nx">took</span><span class="w"> </span><span class="nx">0.17227</span><span class="w"> </span><span class="nx">seconds</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">load</span><span class="p">)</span><span class="w">
</span><span class="mi">3</span><span class="w"> </span><span class="n">examples</span><span class="p">,</span><span class="w"> </span><span class="nx">0</span><span class="w"> </span><span class="nx">failures</span></code></pre></figure>

<p>Mas queremos um relatório melhor com mais informações e visualmente melhor do que apenas mostrar o que deu certou ou não.
Pensando nisso o rspec possui o comando <strong>–format documentation</strong>, vejamos como fica ao usarmos esse comando:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">bundle</span><span class="w"> </span><span class="nx">exec</span><span class="w"> </span><span class="nx">rspec</span><span class="w"> </span><span class="nx">spec</span><span class="w"> </span><span class="nt">--format</span><span class="w"> </span><span class="nx">documentation</span><span class="w">

</span><span class="n">Calculator</span><span class="w">
  </span><span class="c">#sum</span><span class="w">
    </span><span class="n">with</span><span class="w"> </span><span class="nx">positive</span><span class="w"> </span><span class="nx">numbers</span><span class="w">
    </span><span class="n">with</span><span class="w"> </span><span class="nx">negative</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">positive</span><span class="w"> </span><span class="nx">numbers</span><span class="w">
    </span><span class="n">with</span><span class="w"> </span><span class="nx">negative</span><span class="w"> </span><span class="nx">numbers</span><span class="w">

</span><span class="n">Finished</span><span class="w"> </span><span class="nx">in</span><span class="w"> </span><span class="nx">0.00389</span><span class="w"> </span><span class="nx">seconds</span><span class="w"> </span><span class="p">(</span><span class="n">files</span><span class="w"> </span><span class="nx">took</span><span class="w"> </span><span class="nx">0.23323</span><span class="w"> </span><span class="nx">seconds</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">load</span><span class="p">)</span><span class="w">
</span><span class="mi">3</span><span class="w"> </span><span class="n">examples</span><span class="p">,</span><span class="w"> </span><span class="nx">0</span><span class="w"> </span><span class="nx">failures</span></code></pre></figure>

<p>Até mesmo com erros o log fica bem melhor de visualizar:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">bundle</span><span class="w"> </span><span class="nx">exec</span><span class="w"> </span><span class="nx">rspec</span><span class="w"> </span><span class="nx">spec</span><span class="w"> </span><span class="nt">--format</span><span class="w"> </span><span class="nx">documentation</span><span class="w">

</span><span class="n">Failures:</span><span class="w">

  </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="n">Calculator</span><span class="c">#sum with positive numbers</span><span class="w">
     </span><span class="n">Failure/Error:</span><span class="w"> </span><span class="nx">expect</span><span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">.</span><span class="nf">to</span><span class="w"> </span><span class="n">eq</span><span class="p">(</span><span class="mi">112</span><span class="p">)</span><span class="w">
     
       </span><span class="n">expected:</span><span class="w"> </span><span class="nx">112</span><span class="w">
            </span><span class="n">got:</span><span class="w"> </span><span class="nx">12</span><span class="w">
     
       </span><span class="p">(</span><span class="n">compared</span><span class="w"> </span><span class="nx">using</span><span class="w"> </span><span class="o">==</span><span class="p">)</span><span class="w">
     </span><span class="c"># ./spec/calculator/calculator_spec.rb:8:in `block (3 levels) in &lt;top (required)&gt;'</span><span class="w">

</span><span class="n">Finished</span><span class="w"> </span><span class="nx">in</span><span class="w"> </span><span class="nx">0.11017</span><span class="w"> </span><span class="nx">seconds</span><span class="w"> </span><span class="p">(</span><span class="n">files</span><span class="w"> </span><span class="nx">took</span><span class="w"> </span><span class="nx">0.24823</span><span class="w"> </span><span class="nx">seconds</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">load</span><span class="p">)</span><span class="w">
</span><span class="mi">3</span><span class="w"> </span><span class="n">examples</span><span class="p">,</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nx">failure</span><span class="w">

</span><span class="n">Failed</span><span class="w"> </span><span class="nx">examples:</span><span class="w">

</span><span class="n">rspec</span><span class="w"> </span><span class="o">.</span><span class="nx">/spec/calculator/calculator_spec.rb:6</span><span class="w"> </span><span class="c"># Calculator#sum with positive numbers</span></code></pre></figure>

<p>Você deve estar se perguntando “Pô legal mas sempre vou precisar digitar tudo isso??”A resposta é <strong>não</strong> e para resolvermos existem duas maneiras.</p>

<p>A primeira solução é criar dentro do projeto o arquivo .rspec e adicionar nossas configurações nele como por exemplo:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="nt">--require</span><span class="w"> </span><span class="n">spec_helper</span><span class="w">
</span><span class="nt">--format</span><span class="w"> </span><span class="nx">documentation</span><span class="w">
</span><span class="nt">--color</span></code></pre></figure>

<p>A segunda maneira seria alterar o arquivo spec_help.rb localizado no projeto rails na pasta spec, basta adicionar a seguinte linha:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">RSpec.configure</span><span class="w"> </span><span class="nx">do</span><span class="w"> </span><span class="o">|</span><span class="n">config</span><span class="o">|</span><span class="w">
  </span><span class="n">config.formatter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">:</span><span class="n">documentation</span><span class="w">
</span><span class="nx">end</span></code></pre></figure>

<p>As duas maneiras vão carregar as configurações e aplicar ao executar os nossos testes.Para mais informações de output do rspec sempre leia a <a href="https://relishapp.com/rspec/rspec-core/v/2-5/docs/command-line/format-option">documentação</a>.</p>

<p>E para finalizar podemos também exportar o conteúdo de nossos teste para um arquivo txt ou html, para fazer isso basta adicionar a seguinte instrução:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="nt">--format</span><span class="w"> </span><span class="n">html</span><span class="w"> </span><span class="nt">--out</span><span class="w"> </span><span class="nx">nome_arquivo.html</span></code></pre></figure>

<p>Assim teremos uma página html como imagem no início do nosso post.</p>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="TDD" /><category term="RSpec" /><category term="Ruby on Rails" /><summary type="html"><![CDATA[Sabemos que o Rspec é uma ferramenta poderosa para a realização de nossos testes, mas podemos realizar algumas configurações para entedermos melhor seus logs...]]></summary></entry><entry><title type="html">Estrutura Vuejs</title><link href="https://wteophilo.github.io/2018/05/01/estrutura-vuejs.html" rel="alternate" type="text/html" title="Estrutura Vuejs" /><published>2018-05-01T17:20:00+00:00</published><updated>2018-05-01T17:20:00+00:00</updated><id>https://wteophilo.github.io/2018/05/01/estrutura-vuejs</id><content type="html" xml:base="https://wteophilo.github.io/2018/05/01/estrutura-vuejs.html"><![CDATA[<p>Continuando nossos posts sobre o Vuejs. Esse artigo será separado em duas partes:</p>
<ul>
  <li>Estrutura de pastas de um projeto Vuejs</li>
  <li>Templates webpack</li>
</ul>

<p>Caso não tenha visto o primeiro post clique <a href="https://wteophilo.github.io/2018/04/03/ola-vuejs.html">aqui</a>.</p>

<h2 id="estrutura-vuejs">Estrutura Vuejs</h2>

<p>Vamos começar pela estrutura do Vuejs, a estrutura do projeto vai depender muito do template escolhido durante a criação do projeto, abaixo listei as pastas ou arquivos mais comuns:</p>

<ul>
  <li>
    <p><strong>build/</strong>
Esse diretório contém as configurações reais do servidor de desenvolvimento e da compilação do webpack de produção.</p>
  </li>
  <li>
    <p><strong>src/</strong>
Contêm todos código fonte da sua aplicação, a estrutura de como ficarão os arquivos é da escolha do desenvolvedor… então organize com cuidado.</p>
  </li>
  <li>
    <p><strong>static/</strong>:
Diretório onde serão inseridos os arquivos estaticos(css,imagens etc) a ser processados pelo webpack, estes arquivos serão copiados diretamente no mesmo diretório em que os assets gerados pelo Werbpack, consulte qual gerenciador que você utilizará para mais detalhes.</p>
  </li>
  <li>
    <p><strong>test/unit</strong>:
Contêm arquivos relcionados aos testes unitários.</p>
  </li>
  <li>
    <p><strong>test/e2e</strong>:
Contêm arquivos testes e2e(<a href="https://vuejs-templates.github.io/webpack/e2e.html">End-to-End Testing</a>).</p>
  </li>
  <li>
    <p><strong>index.html</strong>:
Este é o template para single page. Durante o desenvolvimento e as compilações, o Webpack gera assets e URLs desses assets gerados serão automaticamente injetadas nesse modelo para renderizar o HTML final.</p>
  </li>
  <li>
    <p><strong>package.json</strong>:
Contém todas as dependências do projeto.</p>
  </li>
</ul>

<h2 id="templates-webpack">Templates WebPack</h2>

<p>Quando vamos criar um projeto vimos que podemos escolher a estrutura(template) do projeto, cada um desses templates utilizam estruturas de pasta diferente. O Vuejs utiliza como bundler tanto <a href="https://webpack.js.org/">webpack</a> quanto o <a href="http://browserify.org/">browserify</a>. Neste <a href="https://medium.freecodecamp.org/browserify-vs-webpack-b3d7ca08a0a9">link</a> existe um post comparando os templates.</p>

<h3 id="tipos-templates">Tipos Templates</h3>

<ul>
  <li><a href="https://github.com/vuejs-templates/webpack">webpack</a>: É o pacote mais completo ou seja ele utiliza o webpack como bundler,possui   vue-loader com hot reload, javascript lint e testes unitários.</li>
  <li><a href="https://github.com/vuejs-templates/webpack-simple">webpack-simple</a>: utiliza o webpack como bundler mas com menos recursos.O webpack-simple não possui hot reload, javascript lint e nem testes unitários.</li>
  <li><a href="https://github.com/vuejs-templates/browserify">browserify</a>: usa o browserify como module bundler. Possui o vue-loader com hot reload, javascript lint e testes unitários.</li>
  <li><a href="https://github.com/vuejs-templates/browserify-simple">browserify-simple</a>: usa o browserify como module bundler, sem hot reload, lint ou testes unitários.</li>
  <li><a href="https://github.com/vuejs-templates/simple">simple</a>: o template mais simples, não utiliza nenhum bundle possui apenas uma única página com o Vue sendo carregado através de um endereço <a href="Content Delivery Network">CDN</a>.</li>
</ul>

<h3 id="buildjs">Build.js</h3>
<p>Se você já conhece o Vuejs provavelmente está se perguntando porque não falei sobre o arquivo build.js, não esqueci dele apenas deixe-o por último.</p>

<p>Basicamente o arquivo build.js é todo o conteúdo da pasta <strong>src</strong>, onde as páginas se transformam em javascript e assim são carregados em memória, deixando que toda alteração feita pelo desenvolvedor seja carrega e exibida em instantes.</p>

<h3 id="babel">Babel</h3>
<p>Mas quem faz essa transformação dos arquivos? O Vuejs utiliza o transpilador <a href="https://babeljs.io/">Babel</a> basicamente transcreve código escrito em ES2015(ecmascript 6) para ES5(ecmascript 5) garantindo assim compatibilidade entre os browsers.</p>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="vuejs" /><summary type="html"><![CDATA[Vamos começar pela estrutura do Vuejs, a estrutura do projeto vai depender muito do template escolhido durante a criação do projeto...]]></summary></entry><entry><title type="html">RSpec-It vs Xit</title><link href="https://wteophilo.github.io/2018/04/14/rspec-it-vs-xit.html" rel="alternate" type="text/html" title="RSpec-It vs Xit" /><published>2018-04-14T12:41:00+00:00</published><updated>2018-04-14T12:41:00+00:00</updated><id>https://wteophilo.github.io/2018/04/14/rspec-it-vs-xit</id><content type="html" xml:base="https://wteophilo.github.io/2018/04/14/rspec-it-vs-xit.html"><![CDATA[<p>Hoje vamos falar um pouco mais sobre o rspec e como pular alguns testes…
Calma a ideia não é burlar nossos testes mas as vezes estamos focados em uma feature e os testes quebram em outros locais…sei que você vai voltar e resolver o problema ;).</p>

<p>Sabemos que quando declaramos um novo teste e não o preenchemos o log é exibido como pendente.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">it</span> <span class="s2">"Deve fazer alguma coisa"</span></code></pre></figure>

<p>Resultado:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">Pending:</span><span class="w"> </span><span class="p">(</span><span class="n">Failures</span><span class="w"> </span><span class="nx">listed</span><span class="w"> </span><span class="nx">here</span><span class="w"> </span><span class="nx">are</span><span class="w"> </span><span class="nx">expected</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">do</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">affect</span><span class="w"> </span><span class="nx">your</span><span class="w"> </span><span class="nx">suite</span><span class="s1">'s status)

  1) Calculator#sum Deve fazer algo
     # Not yet implemented</span></code></pre></figure>

<p>Agora para pularmos um item de nossos testes é necessário apenas adicionarmos o comando <strong>xit</strong> ao invés do it na descrição do teste. Abaixo existe um treço de código mostrando o compartamento do xit:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">"calculator"</span>

<span class="n">describe</span> <span class="no">Calculator</span> <span class="k">do</span>
	<span class="n">subject</span><span class="p">(</span><span class="ss">:calc</span><span class="p">){</span><span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">()}</span>
	<span class="n">context</span> <span class="s2">"#sum"</span> <span class="k">do</span>
		<span class="n">it</span> <span class="s2">"with positive numbers"</span> <span class="k">do</span> 
			<span class="n">result</span> <span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span>
			<span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
		<span class="k">end</span>

		<span class="n">xit</span> <span class="s2">"with negative and positive numbers"</span> <span class="k">do</span>
			<span class="n">result</span> <span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span>
			<span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
		<span class="k">end</span>

		<span class="n">xit</span> <span class="s2">"with negative numbers"</span> <span class="k">do</span>
			<span class="n">result</span> <span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">7</span><span class="p">)</span>
			<span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">-</span><span class="mi">12</span><span class="p">)</span>
		<span class="k">end</span>

	<span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">Pending:</span><span class="w"> </span><span class="p">(</span><span class="n">Failures</span><span class="w"> </span><span class="nx">listed</span><span class="w"> </span><span class="nx">here</span><span class="w"> </span><span class="nx">are</span><span class="w"> </span><span class="nx">expected</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">do</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">affect</span><span class="w"> </span><span class="nx">your</span><span class="w"> </span><span class="nx">suite</span><span class="s1">'s status)

  1) Calculator#sum with negative and positive numbers
     # Temporarily skipped with xit</span></code></pre></figure>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="TDD" /><category term="RSpec" /><category term="Ruby on Rails" /><summary type="html"><![CDATA[Para pularmos um item de nossos testes é necessário apenas adicionarmos o comando xit ao invés do it na descrição do teste...]]></summary></entry><entry><title type="html">RSpec-Executando apenas um teste</title><link href="https://wteophilo.github.io/2018/04/12/executando-apenas-um-teste.html" rel="alternate" type="text/html" title="RSpec-Executando apenas um teste" /><published>2018-04-12T00:03:00+00:00</published><updated>2018-04-12T00:03:00+00:00</updated><id>https://wteophilo.github.io/2018/04/12/executando-apenas-um-teste</id><content type="html" xml:base="https://wteophilo.github.io/2018/04/12/executando-apenas-um-teste.html"><![CDATA[<p>Muitas vezes queremos rodar apenas um teste em nosso projeto e não toda nossa switch, para isso vamos ver alguns comandos que possam nos ajudar nessa tarefa.</p>

<h3 id="rspec-caminho">RSpec caminho</h3>
<p>Digamos que estamos fazendo um projeto em ruby, separamos nossos testes por pasta e queremos executar apenas um arquivo, então basta executar o comando:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">rspec</span><span class="w"> </span><span class="nx">/pasta/arquivo_spec.rb</span></code></pre></figure>

<p>Assim todos os teste dentro do arquivo serão executados.</p>

<h3 id="executando-teste-pelo-título">Executando teste pelo título</h3>
<p>As vezes queremos executar apenas um teste dentro do nosso arquivo de teste, podemos fazer isso usando o sufixo -e “título”, por exemplo:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">rspec</span><span class="w"> </span><span class="nx">/nome_classe/arquivo_spec.rb</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"título"</span></code></pre></figure>

<h3 id="executando-teste-pela-linha">Executando teste pela linha</h3>
<p>Podemos também executar um teste por uma linha do arquivo,vamos utilizar o mesmo conceito do item anterior mas ao invés de buscar o título apenas utilizamos a linha que queremos executar.</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">rspec</span><span class="w"> </span><span class="nx">/nome_classe/arquivo_spec.rb:linha</span></code></pre></figure>

<p>Por enquanto é só isso, nos vemos na próxima.</p>]]></content><author><name>Willian Teophilo</name></author><category term="TDD" /><category term="RSpec" /><category term="Ruby on Rails" /><summary type="html"><![CDATA[Muitas vezes queremos rodar apenas um teste em nosso projeto e não toda nossa switch, para isso vamos ver alguns comandos que possam nos ajudar nessa tarefa...]]></summary></entry></feed>