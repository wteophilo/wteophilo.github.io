I"Õ&<p>Saber linguagens de programa√ß√£o e paradigmas √© muito importante,¬†mas no dia a dia muitas vezes temos que usar alguns servi√ßos de infra que n√£o damos muita import√¢ncia em aprender. Ent√£o vamos come√ßar falando pelo Docker. Para instalar o docker basta seguir este <a href="https://docs.docker.com/get-docker/">link</a>.</p>

<p>Neste post vamos falar sobre:</p>

<ul>
  <li>Docker x VMs</li>
  <li>Dockerfile</li>
  <li>Docker Compose</li>
  <li>Comandos b√°sicos Docker</li>
</ul>

<h3 id="docker-x-vms">Docker x VMs</h3>

<h4 id="m√°quinas-virtuais-vms">M√°quinas virtuais (VMs)</h4>

<p>M√°quinas virtuais (VMs) s√£o uma abstra√ß√£o de hardware f√≠sico que transforma um servidor em muitos servidores. O hypervisor permite que v√°rias VMs sejam executadas em uma √∫nica m√°quina. Cada VM inclui uma c√≥pia completa de um sistema operacional, aplicativo, bin√°rios e bibliotecas necess√°rios¬† ocupando dezenas de GBs.</p>

<p><img src="/assets/img/docker/container-vm.png" alt="container-vm" /></p>

<h5 id="docker">Docker</h5>

<p>Os cont√™ineres s√£o uma abstra√ß√£o na camada de aplicativo que agrupa c√≥digo e depend√™ncias juntos. V√°rios cont√™ineres podem ser executados na mesma m√°quina e compartilhar o kernel do sistema operacional com outros cont√™ineres, cada um executando como processos isolados Os cont√™ineres ocupam menos espa√ßo que as VMs podem lidar com mais aplicativos e requerem menos VMs e sistemas operacionais.</p>

<p><img src="/assets/img/docker/docker-containerized.png" alt="dockercontainerized" /></p>

<h3 id="dockerfile">Dockerfile</h3>

<p>Um Dockerfile √© um documento de texto que cont√©m as instru√ß√µes¬† para montar uma imagem.</p>

<p>Exemplo Dockerfile:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM ruby:2.7.1-alpine3.10

WORKDIR /app
EXPOSE 80

COPY . /app

RUN apk update &amp;&amp; \
    apk add libxslt-dev build-base libxml2-dev curl jq tzdata sqlite-dev yarn &amp;&amp; \
    bundle install &amp;&amp; \
    yarn install 
</code></pre></div></div>

<p>O que faz cada instru√ß√£o do exemplo acima:</p>

<ul>
  <li>FROM: imagem a ser utilizada, no exemplo est√°vamos usando uma imagem de Ubuntu alpine + Ruby 2.7</li>
  <li>WORKDIR: pasta de trabalho normalmente ao acessar o container</li>
  <li>EXPOSE: exp√µe a porta do container</li>
  <li>COPY: copia¬†o conte√∫do da sua m√°quina e adiciona em uma pasta no container</li>
  <li>RUN: executa comandos durante o build da imagem por exemplo instala algumas bibliotecas necess√°rias para o funcionamento do container</li>
</ul>

<h3 id="docker-compose">Docker Compose</h3>

<p>O Docker Compose √© uma ferramenta para orquestar cont√™ineres, com ela podemos subir v√°rios containers ao mesmo tempo por exemplo nosso mais um banco de dados. Para utiliza-lo √© preciso um arquivo <a href="http://yaml.org/">YAML</a> para configurar os servi√ßos do seu aplicativo.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: "3.6"
services:
  web:
    image: api
    build:
      context: .
      volumes:
      - "/app/.bundle"
      - "/app/vendor"
      - ".:/app"
      - "bundle:/usr/local/bundle"
    container_name: api_app
    ports:
      - 80:3000
    depends_on:
      - mysql
      - redis
    env_file: .env.docker
    environment:
      RAILS_ENV: development
    links:
      - mysql
      - redis

  mysql:
    image: mysql:5.7
    ports:
      - '3306:3306'
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_USER=root
    container_name: api_mysql

  redis:
     image: redis:alpine
     container_name: api_redis
     ports:
       - 6379:6379
volumes:
  bundle:
</code></pre></div></div>

<h3 id="comandos-b√°sicos-docker">Comandos b√°sicos Docker</h3>

<p>Criando uma imagem basta utilizar o comando <code class="language-plaintext highlighter-rouge">build</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build .
</code></pre></div></div>

<p>Podemos adicionar tag na nossa nova imagem usando <code class="language-plaintext highlighter-rouge">-t</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build -t "minha-image" .
</code></pre></div></div>

<h5 id="acessando-container">Acessando container</h5>

<p>Para executar um comando dentro do container por exemplo executar um bundle install, caso n√£o tenha especificado no Dockerfile usamos <code class="language-plaintext highlighter-rouge">run</code> e o comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it minha-imagem comando
</code></pre></div></div>

<p>Se o container estiver em p√© e n√£o queria subir outro container basta usar o comando <code class="language-plaintext highlighter-rouge">exec</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker exec -it minha-imagem comando
</code></pre></div></div>

<h4 id="listando-imagens">Listando imagens</h4>

<p>O comando para listar todas as imagens baixadas em seu computador:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker images
</code></pre></div></div>

<p>Podemos mesclar os comandos do Docker com do terminal, digamos que queremos localizar uma imagem em espec√≠fico.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker imagens | grep minha-imagem
</code></pre></div></div>

<p>Para verificar quais containers est√£o rodando no momento em sua m√°quina use o comando baixo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps
</code></pre></div></div>

<p>Na coluna status ter√£o dois valores:</p>

<ul>
  <li>Up - funcionando</li>
  <li>Exit - n√£o funcionado</li>
</ul>

<h4 id="apagando-imagens">Apagando imagens</h4>

<p>Para apagar uma image basta utilizar o comando <code class="language-plaintext highlighter-rouge">rmi</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi hash-imagem
</code></pre></div></div>

<p>Apagando v√°rias imagens</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi $(docker images | grep minha-imagem)
</code></pre></div></div>

<h4 id="logs">Logs</h4>

<p>Podemos verificar tamb√©m os logs de um de nossos containers usando o comando <code class="language-plaintext highlighter-rouge">logs</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker logs minha-imagem
</code></pre></div></div>

<h4 id="volumes">Volumes</h4>

<p>O <a href="https://docs.docker.com/storage/volumes/">volume</a> √© o mecanismo preferido para persistir os dados gerados e usados ‚Äã‚Äãpelos cont√™ineres do Docker, embora as montagens de liga√ß√£o dependam da estrutura de diret√≥rios da m√°quina host, os volumes s√£o completamente gerenciados pelo Docker.</p>

<p>Podemos criar um volume usando o comando <code class="language-plaintext highlighter-rouge">create</code> como mostra o exemplo a seguir:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume create &lt;nome/hash&gt;
</code></pre></div></div>

<p>Para listar todos os volumes basta usar <code class="language-plaintext highlighter-rouge">ls</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume ls
</code></pre></div></div>

<p>Apagando um volume:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume rm &lt;nome/hash&gt;
</code></pre></div></div>

<p>Caso queria apagar todos os volumes de uma vez utilize o comando <code class="language-plaintext highlighter-rouge">prune</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume prune
</code></pre></div></div>

<h4 id="networks">Networks</h4>

<p>Um dos motivos pelos quais os cont√™ineres e servi√ßos do Docker s√£o t√£o poderosos √© que voc√™ pode conect√°-los ou conect√°-los a cargas de trabalho que n√£o s√£o do Docker, para mais informa√ß√µes sobre networks no docker segue o <a href="https://docs.docker.com/network/">link</a>.</p>

<p>Os comandos para manipular um network s√£o os mesmos mostrados nos volumes:</p>

<p>Criando volume:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network create &lt;nome/hash&gt;
</code></pre></div></div>

<p>Listando volume:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network ls
</code></pre></div></div>

<p>Delete volume:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network rm &lt;nome/hash&gt;
</code></pre></div></div>

<p>Por fim algumas dicas para finalizar esse post. Todos estes comandos podem ser usados com o docker-compose caso esteja usando o compose em seu projeto. 
Como existem v√°rios comandos do docker e se tiver alguma d√∫vida em rela√ß√£o de algum deles basta adicionar ‚Äìhelp:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build --help
</code></pre></div></div>

<p>ou consultar a documenta√ß√£o oficial do <a href="https://docs.docker.com/">docker</a>. 
E como uma √∫ltima dica caso tenha um PC com HD/SSD pequeno sempre fique de olho no volume.</p>

<p>Por enquanto √© s√≥ isso, nos vemos na pr√≥xima.</p>

:ET