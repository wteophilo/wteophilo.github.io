I"„<p>Continuando nossos posts sobre o Vuejs. Esse artigo ser√° separado em duas partes:</p>
<ul>
  <li>Estrutura de pastas de um projeto Vuejs</li>
  <li>Templates webpack</li>
</ul>

<p>Caso n√£o tenha visto o primeiro post clique <a href="https://wteophilo.github.io/2018/04/03/ola-vuejs.html">aqui</a>.</p>

<h2 id="estrutura-vuejs">Estrutura Vuejs</h2>

<p>Vamos come√ßar pela estrutura do Vuejs, a estrutura do projeto vai depender muito do template escolhido durante a cria√ß√£o do projeto, abaixo listei as pastas ou arquivos mais comuns:</p>

<ul>
  <li>
    <p><strong>build/</strong>
Esse diret√≥rio cont√©m as configura√ß√µes reais do servidor de desenvolvimento e da compila√ß√£o do webpack de produ√ß√£o.</p>
  </li>
  <li>
    <p><strong>src/</strong>
Cont√™m todos c√≥digo fonte da sua aplica√ß√£o, a estrutura de como ficar√£o os arquivos √© da escolha do desenvolvedor‚Ä¶ ent√£o organize com cuidado.</p>
  </li>
  <li>
    <p><strong>static/</strong>:
Diret√≥rio onde ser√£o inseridos os arquivos estaticos(css,imagens etc) a ser processados pelo webpack, estes arquivos ser√£o copiados diretamente no mesmo diret√≥rio em que os assets gerados pelo Werbpack, consulte qual gerenciador que voc√™ utilizar√° para mais detalhes.</p>
  </li>
  <li>
    <p><strong>test/unit</strong>:
Cont√™m arquivos relcionados aos testes unit√°rios.</p>
  </li>
  <li>
    <p><strong>test/e2e</strong>:
Cont√™m arquivos testes e2e(<a href="https://vuejs-templates.github.io/webpack/e2e.html">End-to-End Testing</a>).</p>
  </li>
  <li>
    <p><strong>index.html</strong>:
Este √© o template para single page. Durante o desenvolvimento e as compila√ß√µes, o Webpack gera assets e URLs desses assets gerados ser√£o automaticamente injetadas nesse modelo para renderizar o HTML final.</p>
  </li>
  <li>
    <p><strong>package.json</strong>:
Cont√©m todas as depend√™ncias do projeto.</p>
  </li>
</ul>

<h2 id="templates-webpack">Templates WebPack</h2>

<p>Quando vamos criar um projeto vimos que podemos escolher a estrutura(template) do projeto, cada um desses templates utilizam estruturas de pasta diferente. O Vuejs utiliza como bundler tanto <a href="https://webpack.js.org/">webpack</a> quanto o <a href="http://browserify.org/">browserify</a>. Neste <a href="https://medium.freecodecamp.org/browserify-vs-webpack-b3d7ca08a0a9">link</a> existe um post comparando os templates.</p>

<h3 id="tipos-templates">Tipos Templates</h3>

<ul>
  <li><a href="https://github.com/vuejs-templates/webpack">webpack</a>: √â o pacote mais completo ou seja ele utiliza o webpack como bundler,possui   vue-loader com hot reload, javascript lint e testes unit√°rios.</li>
  <li><a href="https://github.com/vuejs-templates/webpack-simple">webpack-simple</a>: utiliza o webpack como bundler mas com menos recursos.O webpack-simple n√£o possui hot reload, javascript lint e nem testes unit√°rios.</li>
  <li><a href="https://github.com/vuejs-templates/browserify">browserify</a>: usa o browserify como module bundler. Possui o vue-loader com hot reload, javascript lint e testes unit√°rios.</li>
  <li><a href="https://github.com/vuejs-templates/browserify-simple">browserify-simple</a>: usa o browserify como module bundler, sem hot reload, lint ou testes unit√°rios.</li>
  <li><a href="https://github.com/vuejs-templates/simple">simple</a>: o template mais simples, n√£o utiliza nenhum bundle possui apenas uma √∫nica p√°gina com o Vue sendo carregado atrav√©s de um endere√ßo <a href="Content Delivery Network">CDN</a>.</li>
</ul>

<h3 id="buildjs">Build.js</h3>
<p>Se voc√™ j√° conhece o Vuejs provavelmente est√° se perguntando porque n√£o falei sobre o arquivo build.js, n√£o esqueci dele apenas deixe-o por √∫ltimo.</p>

<p>Basicamente o arquivo build.js √© todo o conte√∫do da pasta <strong>src</strong>, onde as p√°ginas se transformam em javascript e assim s√£o carregados em mem√≥ria, deixando que toda altera√ß√£o feita pelo desenvolvedor seja carrega e exibida em instantes.</p>

<h3 id="babel">Babel</h3>
<p>Mas quem faz essa transforma√ß√£o dos arquivos? O Vuejs utiliza o transpilador <a href="https://babeljs.io/">Babel</a> basicamente transcreve c√≥digo escrito em ES2015(ecmascript 6) para ES5(ecmascript 5) garantindo assim compatibilidade entre os browsers.</p>

<p>Por enquanto √© s√≥ isso, nos vemos na pr√≥xima.</p>

:ET